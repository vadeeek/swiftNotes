import Foundation
import UIKit
/*
–í Swift —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –≤–∏–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:
-> –ü—Ä–æ—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–æ–ø–µ—Ä–∞–Ω–¥–∞–º–∏). –í –∏—Ö —Å–æ—Å—Ç–∞–≤ –≤—Ö–æ–¥—è—Ç —É–Ω–∞—Ä–Ω—ã–µ –∏ –±–∏–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã.
-> –£–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å –æ–¥–Ω–∏–º –æ–ø–µ—Ä–∞–Ω–¥–æ–º. –û–Ω–∏ –º–æ–≥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞–Ω–¥–æ–º (–ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–µ) –∏–ª–∏ –ø–æ—Å–ª–µ –Ω–µ–≥–æ (–ø–æ—Å—Ç—Ñ–∏–∫—Å–Ω—ã–µ).
–û–ø–µ—Ä–∞—Ç–æ—Ä var, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö, –∏–ª–∏
–æ–ø–µ—Ä–∞—Ç–æ—Ä –º–∏–Ω—É—Å (-a), —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞—é—Ç—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞,
—è–≤–ª—è—é—Ç—Å—è —É–Ω–∞—Ä–Ω—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–º–∏.
–î–∞–ª–µ–µ –≤ –∫–Ω–∏–≥–µ –±—É–¥—É—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã –ø—Ä–∏–º–µ—Ä—ã –ø–æ—Å—Ç—Ñ–∏–∫—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ (...) –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ 1... —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤—Å–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –ø–æ—Å–ª–µ
–µ–¥–∏–Ω–∏—Ü—ã.
-> –ë–∏–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å –¥–≤—É–º—è –æ–ø–µ—Ä–∞–Ω–¥–∞–º–∏. –û–ø–µ—Ä–∞—Ç–æ—Ä,
–∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –º–µ–∂–¥—É –æ–ø–µ—Ä–∞–Ω–¥–∞–º–∏, –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–Ω—Ñ–∏–∫—Å–Ω—ã–º.
–û–ø–µ—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (=) –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–ª–æ–∂–µ–Ω–∏—è (+) —è–≤–ª—è—é—Ç—Å—è –±–∏–Ω–∞—Ä–Ω—ã–º–∏
–∏–Ω—Ñ–∏–∫—Å–Ω—ã–º–∏, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ –¥–≤–∞ –æ–ø–µ—Ä–∞–Ω–¥–∞ –∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –º–µ–∂–¥—É
–Ω–∏–º–∏ (value1 = 12 –∏–ª–∏ 34+12).
-> –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ —Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ù–∞–ø—Ä–∏–º–µ—Ä,
–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –∏–ª–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–æ–≥—Ä–∞–º–º–µ, –∫–∞–∫–æ–π –±–ª–æ–∫ –∫–æ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö
—É—Å–ª–æ–≤–∏—è—Ö. –ü–æ–¥—Ä–æ–±–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –±—É–¥—É—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã –≤ –≥–ª–∞–≤–µ ¬´–û–ø–µ—Ä–∞—Ç–æ—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è¬ª.
*/

//        <--- Markdown-–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ --->
//: —ç—Ç–æ markdown-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
//: –æ–±—ä—è–≤–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
var str = "Motherfucker"
//: –∞ —ç—Ç–æ - *–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç*
//: –∞ —ç—Ç–æ - **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**

// –í–∫–ª/–í—ã–∫–ª —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ Editor > Show Rendered Markup / Editor > Show Raw Markup
//---------------------------------------------------------------------------------


//        <--- –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è --->
print("Hello, \(str)!")
//---------------------------------------------------------------------------------


//        <--- –û–±—ä—è–≤–ª–µ–Ω–∏–µ/–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–∞ --->
var variable: Int = 15
var variableOne = Int(13)
var criptoMoney = Double("0.100000000000000000000000000000000001")
var apples = Optional(10)
var apples1: Int? = 10
var apples2: Optional<Int> = 10
//---------------------------------------------------------------------------------


//        <--- –°—Ç—Ä–æ–∫–∏ --->
var stringFromCharacter = String(["h", "e", "l", "l", "o"])

str = """
    Hello, \(str)!
    """
/* !–ù–ï–ö–û–†–†–ï–ö–¢–ù–û!
"""
Hello
 """
*/
//---------------------------------------------------------------------------------


//        <--- Unicode-—Å–∫–∞–ª—è—Ä—ã --->
let myCharOverUnicode: Character = "\u{041A}"
let stringOverUnicode = "\u{41C}\u{438}\u{440}\u{20}\u{412}\u{430}\u{43C}\u{21}"
//---------------------------------------------------------------------------------


//        <--- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞ –¥–ª—è —Ç–∏–ø–∞ --->
typealias exampleName = UInt8
var example: exampleName = 29
typealias UserInfo = (firstName: String, lastName: String)
//---------------------------------------------------------------------------------


//        <--- Tuple --->
var wordsAfterLose: (String, String, String) = ("I", "love", "your mother")
// (.0 ..., .1 ..., .2 ...)
/* –æ–±—ä—è–≤–ª—è–µ–º tuple —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ç–∏–ø–∞ */
let statusTuple: (statusCode: Int, statusText: String, statusConnect: Bool)
= (200, "In Work", true)
let statusTuple1: (Int, String, Bool)
= (statusCode: 200, statusText: "In Work", statusConnect: true)

// –∑–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏–π tuple –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let (firstWord, secondWord, _) = wordsAfterLose
print("\(firstWord) \(secondWord) your mother")

/*
 -- –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å—ã tuple --
print("\(wordsAfterLose.0)\(wordsAfterLose.1)\(wordsAfterLose.2)")

-- –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ –∏–º–µ–Ω–∞ tuple --
print("\(statusTuple1.statusCode)\(statusTuple1.statusText)\(statusTuple1.statusConnect)")
*/
//---------------------------------------------------------------------------------


//        <--- Dictionary --->
// –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –æ–¥–Ω–æ—Ç–∏–ø–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
var phoneBookMothersOfTheDistrict: [String: String] = [:]
var phoneBookMothersOfTheDistrict1 = [String: String]()
var phoneBookMothersOfTheDistrict2 = ["Galochka":"+79999990011",
                                      "Julia":"+78990991423"]

phoneBookMothersOfTheDistrict2["Galochka"] = "+79999990012"
phoneBookMothersOfTheDistrict2["Tamara"] = "+79997790012"
print(phoneBookMothersOfTheDistrict2)
print(phoneBookMothersOfTheDistrict2.keys)

if phoneBookMothersOfTheDistrict2.updateValue("+79999990000", forKey: "Galochka") != nil {
    print("Updated successfully!")
} else {
    print("It's new record!")
}
print(phoneBookMothersOfTheDistrict2["Galochka"]!)

if let phone = phoneBookMothersOfTheDistrict2["Galochka"] {
    print(phone)
}
//---------------------------------------------------------------------------------


//        <--- –ú–∞—Å—Å–∏–≤—ã --->
var animals: [String] = ["Wolf", "Bear", "Rabbit"]
var animals1 = [String]()
var animals2 = Array<String>()
var nums = [1, 2, 3, 4, 5, 6] as [Double]
var array5x5 = Array(repeating: Array(repeating: 25, count: 5), count: 5)
print(array5x5)


animals[2] = "Cat"
animals.append("Dog")
animals.insert("Pig", at: 1)
print(animals)
animals.remove(at: 0)
print(animals)
animals.removeAll()

let newAnimals = ["–Å–∂", "–†—ã—Å—å", "–û–ª–µ–Ω—å"]
animals += newAnimals
animals.shuffle() // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
animals.shuffled() // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤

// –ó–∞–º—ã–∫–∞–Ω–∏–µ
let filteredAnimals = animals.filter { animal in
    animal.first == "W"
}
print(filteredAnimals)
// –ó–∞–º—ã–∫–∞–Ω–∏–µ
let numbers = [2, 3, 4, 5, 67, 87, 200]
let oddNumbers = numbers.filter { number in
    number % 2 == 0
}
print(oddNumbers)
// –ó–∞–º—ã–∫–∞–Ω–∏–µ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
animals.sort { firstAnimal, lastAnimal in
    firstAnimal < lastAnimal
}
// –ó–∞–º—ã–∫–∞–Ω–∏–µ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –º–µ—Ç–æ–¥–æ–º sorted, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
let alphabetAnimals = animals.sorted { firstAnimal, secondAnimal in
    firstAnimal < secondAnimal
}
// –ó–∞–º—ã–∫–∞–Ω–∏–µ –ø–æ–¥—Å—á—ë—Ç–∞ —Å—É–º–º—ã —á–∏—Å–µ–ª –º–∞—Å—Å–∏–≤–∞
var arrSum = numbers.reduce(0) { (sum, value) in
    return sum + value
}
// –í–∞—â–µ —Ö–∑ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Çü§Ø
var value = numbers.map{$0 * 2}.filter{$0 < 5}.reduce(0, +)
print(value)

// –ú–∞–ø–ø–∏–Ω–≥
let numbersForMap = [1, 3, 5, 4, 6, 7]
let result = numbersForMap.map { number in
    pow(Decimal(number), 3) // number * number * number
}
print(result)

let names = ["–í–∞—Å—è", "–ò–ª—å—è", "–ú–∞—à–∞", "–ì–µ–Ω–∞"]
let greetings = names.map { name in
    "–ü—Ä–∏–≤–µ—Ç, \(name)!"
}
print(greetings)

var animalss = [("Giraffe", 2), ("Wolf", 5)]
var animalZooMap = animalss.map { (name, count) in
    "This zoo has \(name), in quantity \(count)."
}
print(animalZooMap)
//---------------------------------------------------------------------------------


//        <--- –ú–Ω–æ–∂–µ—Å—Ç–≤–∞ --->
// –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
var exampleSet = Set<Int>()
var exampleSet1: Set<String> = ["basketball", "foorball"]
var circleStations: Set = ["–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è", "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è", "–ö–∏–µ–≤—Å–∫–∞—è", "–ö—É—Ä—Å–∫–∞—è"]
circleStations.insert("–ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã")
circleStations.contains("–í–æ–π–∫–æ–≤—Å–∫–∞—è")
circleStations.contains("–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è")
print(circleStations.contains("–í–æ–π–∫–æ–≤—Å–∫–∞—è") ? "–í–æ–π–∫–æ–≤—Å–∫–∞—è –µ—Å—Ç—å –Ω–∞ –∫–æ–ª—å—Ü–µ–≤–æ–π –ª–∏–Ω–∏–∏" : "–í–æ–π–∫–æ–≤—Å–∫–æ–π –Ω–µ—Ç –Ω–∞ –∫–æ–ª—å—Ü–µ–≤–æ–π –ª–∏–Ω–∏–∏")

for station in circleStations.sorted() {
    print(station)
}
// –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ä—â–∞ :D
var productsForBorsch: Set = ["–°–≤–µ–∫–ª–∞", "–õ—É–∫", "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", "–ö–∞–ø—É—Å—Ç–∞", "–ì–æ–≤—è–¥–∏–Ω–∞", "–°–æ–ª—å", "–ü–µ—Ä–µ—Ü"]

let haveProducts: Set = ["–°–≤–µ–∫–ª–∞", "–ö–∞–ø—É—Å—Ç–∞", "–ì–æ–≤—è–¥–∏–Ω–∞", "–°–æ–µ–≤—ã–π —Å–æ—É—Å", "–Ø–π—Ü–∞", "–ú–æ–ª–æ–∫–æ"]

// –í—ã—á–∏—Ç–∞–Ω–∏–µ - subtract
productsForBorsch.subtract(haveProducts)
print(productsForBorsch)


var firstProviders: Set = ["–†–¢–ö", "–ë–∏–ª–∞–π–Ω", "–ú–¢–°"]
var secondProviders: Set = ["–†–¢–ö", "–ú–¢–°", "–î–æ–º.—Ä—É", "–°—Ç—Ä–∏–º"]

// –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ - intersection
var providers = firstProviders.intersection(secondProviders)
print(providers)

let firstCourse: Set = ["iOS", "Swift", "–î–∏–∑–∞–π–Ω", "UX-–ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"]
let secondCourse: Set = ["–í–µ–±-–≤–µ—Ä—Å—Ç–∫–∞", "–û—Å–Ω–æ–≤—ã JS", "–î–∏–∑–∞–π–Ω", "UX-–ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"]

// –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ - union
let skills = firstCourse.union(secondCourse)
print(skills)

// –°–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å - symmetric difference
let uniqueSkills = firstCourse.symmetricDifference(secondCourse)
print(uniqueSkills)
//---------------------------------------------------------------------------------


//        <--- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö--->
var apples3: Int? = 2

var tuple1: (code: Int, message: String)? = nil
var tupleWithOptElements: (Int?, Int) = (nil, 100)

// 1. –ñ–µ—Å—Ç–∫–æ–µ (–ø—Ä—è–º–æ–µ) –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑-–ø–æ–¥ –æ–ø—Ü–∏–æ–Ω–∞–ª–∞ (unwraping).
// –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –í –¢–û–ú –°–õ–£–ß–ê–ï, –ö–û–ì–î–ê –ù–ê 1000% –£–í–ï–†–ï–ù, –ß–¢–û –ó–ù–ê–ß–ï–ù–ò–ï –ï–°–¢–¨, –ê –ù–ï –°–¢–û–ò–¢ nil!!!
print("You have \(apples!) fucking apples in your ass! Your ass sooo BIG.")

// 2. –ö–æ—Å–≤–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø—Ü–∏–æ–Ω–∞–ª–∞ (implicitly unwrapping)
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–¥–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ nil (–≤–æ –≤—Ä–µ–º—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π), –∞ –ø–æ—Ç–æ–º –ø—Ä–∏—Å–≤–æ–µ–Ω–æ –æ–±—ã—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í —Å–ª—É—á–∞–µ nil - –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ö–†–ê–®–ù–ï–¢–°–Ø!!!
var wrapInt: Double! = nil
wrapInt = 3.14
print(wrapInt + 0.12)

// 3. –ú—è–≥–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑-–ø–æ–¥ –æ–ø—Ü–∏–æ–Ω–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é –≤–µ—Ç–≤–ª–µ–Ω–∏–π

// 1)
var fiveMarkCount: Int? = 8
var allCakesCount = 0
if fiveMarkCount != nil {
    let cakeForEachFiveMark = 2
    allCakesCount = cakeForEachFiveMark * fiveMarkCount!
}
print("You got \(allCakesCount) cakes, little pizd'uk!")

// 2)
let userName: String? = "Vadeek"
let age: Int? = 19
age != nil ? print("Name: \(userName!). Age: \(age!).") : print("Name: \(userName!).")


// 4. –û–ø–µ—Ä–∞—Ç–æ—Ä –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è (—Å–≤—è–∑—ã–≤–∞–Ω–∏—è) –ø–æ nil (optional binding)

// 1)
var userLogin: String? = "vasyaPupkin228"
if let personName = userLogin {
    print("Name:  \(personName)")
} else {
    print("Name not entered!")
}

var pointX: Int? = 10
var pointY: Int? = 3
if let _ = pointX, let y = pointY, y < 10 {
    print("Point exists!")
}

var yearOfBirth = "1980"
if let safeYearOfBirth = Int(yearOfBirth) {
    print(safeYearOfBirth)
}

// 2)
let defaultName = "Guest"
let nameForGreeting = userName ?? defaultName
print("Hello, fucking \(nameForGreeting)!")
print("Hello, fucking \(userName ?? defaultName)!")

var x: Int? = 10
var y: Int = x ?? 0

// 3)
var nickname: String? = "chumba"
if let nickname {
    print("Hey, \(nickname)")
}
//---------------------------------------------------------------------------------


//        <--- If-Guard-Switch --->
var lastMatchWin = false
var badMood = true
if !lastMatchWin && badMood {
    print("Your mother very uglyü§Æ")
} else if !lastMatchWin && badMood {
    print("I love your mother very muchüëâüëà")
} else {
    print("Fuck YOU, piece of shit!!!")
}


// --- Guard ---
func calc(x: Float?, y: Float) {
    guard let x = x else { return } // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ optional binding —Å guard
    guard y != 0 else { return }
    guard x > 5 else { return }

    let z = x / y
    print(z)
}
calc(x: 10, y: 2)

// –¢–µ—Ä–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
let contentHeight = 40
let hasHeader = true

let loveToYourEnemy = (!lastMatchWin || badMood) ? "Your mother very uglyü§Æ" : "I love your mother very muchüëâüëà"
let rowHeight = contentHeight + (hasHeader ? 50 : 20)


// --- Switch ---
let grade = 5
switch grade {
case 5,4:
    print("–û—Ç–ª–∏—á–Ω–æ!")
case 2...3:
    print("–ü–ª–æ—Ö–æ!")
case 2:
    print("–û—á–µ–Ω—å –ü–ª–æ—Ö–æ!")
    fallthrough // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–ª –Ω–∏–∂–µ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç–∏ —Å–ª–µ–¥ –∫–µ–π—Å–∞), –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –≤ default
default:
    print("–ú–Ω–µ –Ω–µ—á–µ–≥–æ —Å–∫–∞–∑–∞—Ç—å...")
}

let arri: [any Equatable] = [5, 5.4, Float(5.4)]

switch arri[0] {
case _ as Int: print("Int")
case _ as Float: print("Float")
case _ as Double: print("Double")
default:
    break
}


// Switch and Tuple
let somePoint = (1, 1)
switch somePoint {
case (0, 0):
    print("\(somePoint) is at the origin")
case (_, 0):
    print("\(somePoint) is on the x-axis")
case (let x, 0):
    print("on the x-axis with an x value of \(x)")
case let(x, y) where x == -y:
    print("(\(x), \(y)) is on the line x == -y")
case (let x, 0), (0, let x):
    print("On an axis, \(x) from the origin")
case (-2...2, -2...2):
    print("\(somePoint) is inside the box")
default:
    print("\(somePoint) is outside of the box")
}

// –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Switch
var varForTest = 1

switchMarker: switch varForTest {
case 1:
    print("Variable = \(varForTest)")
    break switchMarker
default:
    break
}
//---------------------------------------------------------------------------------


//        <--- For-in --->
for number in 1...10 {
    print(number)
}

for _ in 1...2 {
    print("You fuck me, Daddy??ü•µ")
}

// –ü—Ä–æ—Ö–æ–¥ –ø–æ –º–∞—Å—Å–∏–≤—É —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
var shoppingList = ["eggs", "bread", "milk"]
for (index, value) in shoppingList.enumerated() {
    print("Item \(index + 1): \(value)")
}
//---------------------------------------------------------------------------------


//        <--- While and repeat-While --->
var deepOfYourAssHole = 10

while deepOfYourAssHole <= 12 {
    print("Your ass hole will be deeper, be patient!")
    deepOfYourAssHole += 1
}

repeat {
    print(deepOfYourAssHole)
    deepOfYourAssHole += 1
} while deepOfYourAssHole <= 20

// –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è While
varForTest = 1
whileMarker: while(varForTest == 0) {
    print("You're dumb!!!")
    if varForTest == 0 {
        break whileMarker
    }
}
//---------------------------------------------------------------------------------


//        <--- –§—É–Ω–∫—Ü–∏–∏ --->
func someFunction(id: Int) -> (firstname: String, lastname: String) {
    // ...
    var firstname = "vadeek"
    var lastname = "velichko"
    return (firstname, lastname)
}
// –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–æ–±–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω—ã –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –ø—Ä–∏–µ–º–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
let (firstname, lastname) = someFunction(id: 12)

func sumMany(numbers: Int...) {
    var sum = 0
    
    for number in numbers {
        sum += number
    }
    (sum)
}
sumMany(numbers: 1,2,3,4,5,6,7,8,9)

// –°–∫–≤–æ–∑–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä
// inout - –¥–µ–ª–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∞—Ä–≥–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ
func changeValue(value: inout Double) {
    value = 5
}
var a = 1.0
changeValue(value: &a)
print(a)

func shoppingList(item: String, quantity: Int) -> String {
  "You need to buy \(quantity) \(item)."
}
// shoppingList: (String, Int) -> String

func repeater(_ phrase: String, times: Int) -> String {
  var result = ""
  for _ in 1...times {
    result += phrase
  }
  return result
}
// repeater: (String, Int) -> String

// –¢–∏–ø—ã —Ñ—É–Ω–∫—Ü–∏–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π.
func apply3(to str: String, function f: (String, Int) -> String) -> String {
  f(str,3)
}
// apply3: ([String], (String, Int) -> String) -> [String]

apply3(to: "eggs", function: shoppingList)
// => "You need to buy 3 eggs."

apply3(to: "eggs", function: repeater)
// => "eggseggseggs"

// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
func makeAdder(base: Int) -> (Int) -> Int {
  func adder(_ i: Int) -> Int {
    base + i
  }
  return adder
}
// makeAdder: (Int) -> (Int) -> Int

let add10 = makeAdder(base: 10)
// add10: (Int) -> Int

let subtract20 = makeAdder(base: -20)
// subtract10: (Int) -> Int

add10(5)
// => 15

subtract20(5)
// => -15

func getHuman() -> (String, Int, Double) {
    return (name: "Nikolay", age: 30, height: 1.80)
}
let (nameHuman, ageHuman, heightHuman) = getHuman()


// –°—É–º–º–∞ –≤—Å–µ—Ö —á–∏—Å–µ–ª –º–∞—Å—Å–∏–≤–∞
let cash: [Double] = [123, 435, 657, 7657, 332, 43, 211]
let sum = cash.reduce(0) { (result, item) -> Double in
    result + item
}

func getIncomeTotal(with cash: [Double], percent: Double = 0.5) -> Double {
    var sum = cash.reduce(0, +) // –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å—É–º–º—ã –≤—Å–µ—Ö —á–∏—Å–µ–ª –º–∞—Å—Å–∏–≤–∞
    sum -= sum * percent
    return sum
}
let incomeShop1 = getIncomeTotal(with: cash)
let cash1: [Double] = [13, 35, 657, 757, 33, 4, 21]
let incomeShop2 = getIncomeTotal(with: cash1, percent: 0.3)


func getUser() -> [String] {
    return ["Ivan", "Ivanov"]
}
let returning = getUser()
print(returning[0])

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ guard –≤ –§—É–Ω–∫—Ü–∏–∏
func greeting(name: String?) -> String {
    guard let name = name else {
        return "–ü—Ä–∏–≤–µ—Ç, –≥–æ—Å—Ç—å!"
    }
    return "–ü—Ä–∏–≤–µ—Ç, \(name)!"
}
print(greeting(name: "vadeek"))

// –í–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
func square(numbers: Int...) {
    for number in numbers {
        print("\(number) squared is \(number * number)")
    }
}
square(numbers: 1, 2, 3, 4)
//---------------------------------------------------------------------------------


//        <--- –ó–∞–º—ã–∫–∞–Ω–∏—è (Closures) --->
// 1. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// 2. –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// 3. –ó–∞–º—ã–∫–∞—é—â–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è

// { (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã) -> ReturnType in
     // —Ç–µ–ª–æ –∑–∞–º—ã–∫–∞–Ω–∏—è
// }

// –ü—Ä–æ—Å—Ç–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ, –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–µ –∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–µ –Ω–∏–∫–∞–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
let newGreeting = {
    print("Hello, Pidor!")
}
newGreeting()


let message = { (user: String?, text: String) in
    if let user = user {
        print("\(user), \(text)")
    } else {
        print(text)
    }
}
message("–í–∞—Å—è", "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?")
message(nil, "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!")


let summ = { (x: Int, y: Int) -> Int in
    return x + y
}
summ(5, 67)

let diff = { (x: Int, y: Int) -> Int in
    return x - y
}

func operation(a: Int, _ b: Int, _ action: (Int, Int) -> Int) {
    print(action(a, b))
}

// –°–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è
operation(a: 15, 43) { x, y in
    x * y
}

operation(a: 60, 20, diff)
operation(a: 60, 20, summ)


func pryam(width: Double, height: Double, action: (Double, Double) -> Double) -> Double {
    return action(width, height)
}

let plosch = { (width: Double, height: Double) -> Double in
    return width * height
}

let perim = { (width: Double, height: Double) -> Double in
    return 2 * (width + height)
}

pryam(width: 2, height: 1, action: plosch)
pryam(width: 2, height: 1, action: perim)
//---------------------------------------------------------------------------------


//        <--- –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è (Enumerations) --->
enum TypeDevice {
    case laptop(mark:markLaptop)
    case desktopComputer
    case tablet
    case smartPhone(mark:markSmartPhone)
    case smartWatch
    
    // Nested Enum
    enum markLaptop {
        case apple
        case acer
        case hp
    }
    // Nested Enum —Å Raw Value —Å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º –æ—Ç String
    enum markSmartPhone:String {
        case iphone = "Apple iPhone"
        case samsung = "Samsung"
    }
}

// let device:TypeDevice = .laptop(mark: .acer)
let device:TypeDevice = .smartPhone(mark: .iphone)
switch device {
case .laptop(let markLaptop) where markLaptop == .apple:
    print("–ù–æ—É—Ç–±—É–∫ Apple")
case .laptop:
    print("–ù–æ—É—Ç–±—É–∫")
case .desktopComputer:
    print("–ü–ö")
case .smartWatch:
    print("–£–º–Ω—ã–µ —á–∞—Å—ã")
case .tablet:
    print("–ü–ª–∞–Ω—à–µ—Ç")
case .smartPhone(let markSmartPhone) where markSmartPhone == .iphone:
    print("–°–º–∞—Ä—Ç—Ñ–æ–Ω \(markSmartPhone.rawValue)")
case .smartPhone:
    print("–°–º–∞—Ä—Ç—Ñ–æ–Ω")
}


enum markAuto:String {
    case bmw = "BMW M5 F90"
    case mercedes = "Mercedes AMG"
}
let markauto = markAuto(rawValue: "BMW M5 F90")
print(markauto?.rawValue)


enum DayTime {
    case morning
    case afternoon
    case evening
    case night
}

var currentTime = DayTime.afternoon
currentTime = .evening

let night: DayTime = .night

switch currentTime {
    
case .morning:
    print("–ü—å—é –∫–æ—Ñ–µ")
case .afternoon:
    print("–ü—å—é —á–∞–π")
case .evening:
    print("–ü—å—é")
case .night:
    print("–°–ø–ª—é")
}

// –ê—Å—Å–æ—Ü–∏–∏—Ä—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

enum Profession {
    case programmer(String, String, Int)
    case sysAdmin(String, String)
    case webDesigner(String, Int)
    case cleaningManager(String)
}

let myProfession = Profession.programmer("Vadeek", "iOS", 0)
let designer = Profession.webDesigner("–ò—Ä–∏–Ω–∞", 30)

func check(prof: Profession) {
    switch prof {
        
    case .programmer(let name, let speciality, let experience):
        print("–ú–µ–Ω—è –∑–æ–≤—É—Ç \(name). –Ø —Ä–∞–±–æ—Ç–∞—é \(speciality)-–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –≤–æ—Ç —É–∂–µ \(experience) –ª–µ—Ç")
    case .sysAdmin(let name, let speciality):
        print("–ú–µ–Ω—è –∑–æ–≤—É—Ç \(name). –Ø —Ä–∞–±–æ—Ç–∞—é —Å–∏—Å—Ç–µ–º–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ \(speciality)")
    case .webDesigner(_, _):
        break
    case .cleaningManager(_):
        break
    }
}
check(prof: myProfession)

// –ß–∏—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (Raw Value)
enum MyPetName: String, CaseIterable {
    case cat = "Vasya"
    case dog = "Tuzik"
    case boa = "Shnurok"
    case parrot = "Popka Durak"
}

var myCat = MyPetName.cat
var myCatName = myCat.rawValue

var myPets = MyPetName.allCases
print(myPets)

for pet in myPets {
    print(pet.rawValue)
}

enum Season: Int {
    case winter = 1, spring, summer, autumn
    
    var label: String {
        switch self {
        case .winter:
            return "–ó–∏–º–∞"
        case .spring:
            return "–í–µ—Å–Ω–∞"
        case .summer:
            return "–õ–µ—Ç–æ"
        case .autumn:
            return "–û—Å–µ–Ω—å"
        }
    }
    
    init? (_ value: String) {
        switch value {
        case "–ó–∏–º–∞": self = .winter
        case "–í–µ—Å–Ω–∞": self = .spring
        case "–õ–µ—Ç–æ": self = .summer
        case "–û—Å–µ–Ω—å": self = .autumn
        default: return nil
        }
    }
    
    func printLabel() {
        print(self.label)
    }
}

let season = Season("–ó–∏–º–∞")
if season != nil {
    season!.printLabel()
}
//---------------------------------------------------------------------------------


//        <--- –ö–ª–∞—Å—Å—ã --->
// –°—Å—ã–ª–æ—á–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
class Player {
    
    // –°–≤–æ–π—Å—Ç–≤–∞
    let name: String
    var level: Int = 0
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
    init(name: String) {
        self.name = name
    }
    
    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
    init(name: String = "–ì–æ—Å—Ç—å", level: Int = 0) {
        self.level = level
        self.name = name
    }
    
    func printInfo() {
        print("–ò–º—è –∏–≥—Ä–æ–∫–∞: \(name). –£—Ä–æ–≤–µ–Ω—å: \(self.level)")
    }
    
    func levelUp(count: Int) {
        self.level += count
    }
    
    func levelDown(count: Int) {
        guard count < self.level else {
            self.level = 0
            return
        }
        self.level -= count
    }
}

var player1 = Player(name: "–§—ë–¥–æ—Ä")
player1.printInfo()
var player2 = Player(name: "–ï–≥–æ—Ä")
player2.printInfo()
var player3 = Player()
player3.printInfo()
var player4 = Player(name: "–ê–ª–∏—Å–∞", level: 4)
player4.printInfo()
player4.levelUp(count: 2)
player4.printInfo()
player4.levelDown(count: 7)
player4.printInfo()

var players: [Player] = [player1, player2, player3, player4]

for player in players {
    print("\(player.name) | –£—Ä–æ–≤–µ–Ω—å: \(player.level)")
}




class SalesManager {
    
    // –°–í–û–ô–°–¢–í–ê –¢–ò–ü–ê:
    // –•—Ä–∞–Ω–∏–º—ã–µ(—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ) - –Ω–µ –º–æ–≥—É—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è
    static var phoneModel = "iPhone SE"
    
    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ(–∫–ª–∞—Å—Å–æ–≤—ã–µ) - –º–æ–≥—É—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è
    class var companyTitle: String { return "DICK.COMPANY"}
    
    // –°–í–û–ô–°–¢–í–ê –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê:
    // –•—Ä–∞–Ω–∏–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ (Stored Properties)
    var salaryBase = 15000
    var calls = 0 {
        willSet {
            print("–í—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ \(newValue) –∑–≤–æ–Ω–∫–æ–≤. –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ \(calls)")
        }
        
        didSet {
            if calls >= 130 {
                print("KPI –ø–æ –∑–≤–æ–Ω–∫–∞–º –≤—ã–ø–æ–ª–Ω–µ–Ω! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤: \(calls)")
            }
        }
    }
    
    
    var salesAmount = 0 {
        // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        willSet {
            print("–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ \(newValue) —Ä—É–±–ª–µ–π. –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ \(salesAmount)")
        }
        // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        didSet {
            if salesAmount >= 300000 {
                print("KPI –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –≤—ã–ø–æ–ª–Ω–µ–Ω! –°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: \(salesAmount)")
            }
        }
    }
    
    
    var sanctionsAmount = 0
    
    // –õ–µ–Ω–∏–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:
    lazy var userPicture = UIImage()
    
    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ (Computed Properties)
    var motivation: Int {
        
        if calls >= 130 && salesAmount >= 300000 {
            let motiv = self.calls * 50 + (salesAmount / 100 * 12)
            return motiv
        } else {
            return 0
        }
    }
    
    var salary: Int {
        var result = salaryBase + motivation - sanctionsAmount
        guard result >= salaryBase / 2 else {
            result = salaryBase / 2
            return result
        }
        return result
    }
}

let fedya = SalesManager()
fedya.motivation
SalesManager.phoneModel = "iPhone XR"
fedya.salesAmount = 30000
fedya.salesAmount = 400000
fedya.calls = 5
fedya.calls = 150
//---------------------------------------------------------------------------------


//        <--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã --->
class Car {
    
    let brandAndModel: String
    let wheelsCount: Int
    var color = "White"
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    init(brandAndModel: String, wheelsCount: Int = 4) {
        self.brandAndModel = brandAndModel
        self.wheelsCount = wheelsCount
    }
    
    // Memberwise-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
    init(brandAndModel: String, wheelsCount: Int, color: String) {
        self.brandAndModel = brandAndModel
        self.wheelsCount = wheelsCount
        self.color = color
    }
    
    // Failable-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
    init?(brand: String, model: String, wheelsCount: Int) {
        
        if wheelsCount < 4 {
            return nil
        } else {
            self.wheelsCount = wheelsCount
            self.brandAndModel  = "\(brand) \(model)"
        }
    }
    
    // "–£–¥–æ–±–Ω—ã–π" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
    convenience init(brandAndModel: String, color: String) {
        self.init(brandAndModel: brandAndModel)
        self.color = color
    }
}

let mercedes = Car(brandAndModel: "Mercedes-Benz AMG") // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let bmw = Car(brandAndModel: "BMW M5 F90", wheelsCount: 6) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –±–µ–∑ —É—á–µ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let honda = Car(brandAndModel: "Honda Accord", color: "Red")
//---------------------------------------------------------------------------------


//        <--- –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ --->
class Vehicle {
    
    let brand: String
    let massa: Int
    
    init(massa: Int, brand: String) {
        self.brand = brand
        self.massa = massa
    }
    
    func go() {
        print("It's going!")
    }
}

let vehicle = Vehicle(massa: 12, brand: "Forward")

class NewCar: Vehicle {
    
    let carType: String
    let enginePower: Int
    
    init(carType: String, enginePower: Int, brand: String, massa: Int) {
        self.carType = carType
        self.enginePower = enginePower
        super.init(massa: massa, brand: brand)
    }
    
    func klakson() {
        print("Beep-beeep!!!")
    }
}

let audi = NewCar(carType: "City", enginePower: 300, brand: "Audi", massa: 1600)
let kia = NewCar(carType: "City", enginePower: 150, brand: "Kia", massa: 1400)

var cars: [NewCar] = [audi, kia]

final class SportCar: NewCar {
    
    let maxSpeed: Int
    
    init(enginePower: Int, brand: String, massa: Int, maxSpeed: Int) {
        self.maxSpeed = maxSpeed
        super.init(carType: "Sport Car", enginePower: enginePower, brand: brand, massa: massa)
    }
}

let ferrari = SportCar(enginePower: 430, brand: "Ferrari", massa: 1500, maxSpeed: 340)
let porsche = SportCar(enginePower: 410, brand: "Porsche", massa: 1700, maxSpeed: 320)

audi.go()
porsche.massa

cars.append(ferrari)
cars.append(porsche)

var sportCars = [SportCar]()

for car in cars {
    if car is SportCar {
        sportCars.append((car as! SportCar))
    }
}

for sportCar in sportCars {
    print(sportCar.brand)
}
//---------------------------------------------------------------------------------


//        <--- –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º --->
// –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º - —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–æ–≤-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞(—Ç–æ–ª—å–∫–æ –≤—ã—á–∏—Å–ª–∏–º—ã–µ), –º–µ—Ç–æ–¥—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –∫–ª–∞—Å—Å–æ–≤-—Ä–æ–¥–∏—Ç–µ–ª–µ–π, –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏

class Teacher {
    
    let name: String
    var description: String {
        return "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç \(name). –Ø —É—á–∏—Ç–µ–ª—å."
    }
    
    init(name: String) {
        self.name = name
    }
    
    func teach() {
        print("–Ø —É—á—É –ª—é–¥–µ–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!")
    }
}

class IOSTeacher: Teacher {
    
    let speciality: String
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
    override var description: String {
        return "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç \(name). –Ø —É—á–∏—Ç–µ–ª—å –ø–æ iOS-–†–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ú–æ—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å - \(speciality)"
    }
    
    init(name: String, speciality: String) {
        self.speciality = speciality
        super.init(name: name)
    }
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    override init(name: String) {
        self.speciality = "Frontend"
        super.init(name: name)
    }
    
    func swiftCoding() {
        print("–Ø –ø—Ä–æ–≥–∞—é –Ω–∞ Swift")
    }
    
    override func teach() {
        print("–Ø —É—á—É –ª—é–¥–µ–π iOS-–†–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!")
    }
    // –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –º–µ—Ç–æ–¥–∞
    func teach(hours: Int) {
        print("–Ø —É—á—É –ª—é–¥–µ–π –±–ª–∏–∂–∞–π—à–∏–µ \(hours) —á–∞—Å–æ–≤")
    }
}

let teacher = Teacher(name: "–§–µ–¥—è")
teacher.description
teacher.teach()

let iOSTeacher = IOSTeacher(name: "–í–ª–∞–¥", speciality: "Front")
iOSTeacher.speciality
iOSTeacher.swiftCoding()

let iOSTeacher2 = IOSTeacher(name: "–ê–Ω–¥—Ä–µ–π")
iOSTeacher2.speciality
iOSTeacher2.description
iOSTeacher2.teach()
iOSTeacher2.teach(hours: 5)
//---------------------------------------------------------------------------------


//        <---  –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è --->
class Wallet {
    
    // Singleton
    static let shared = Wallet()
    private var balance = 0
    
    private init() { }
    
    func add(cash: Int) {
        self.balance += cash
        print(self.balance)
    }
    
    func withdraw(cash: Int) -> Int {
        
        guard cash <= balance else {
            return 0
        }
        
        balance -= cash
        return cash
    }
    
    func getBalance() -> Int {
        return self.balance
    }
}

class Shop {
    
    var wallet = Wallet.shared
}

class Job {
    
    var wallet = Wallet.shared
}

var ashan = Shop()
var fabrica = Job()

fabrica.wallet.add(cash: 15000)
let checkSum = ashan.wallet.withdraw(cash: 3000)

print(checkSum)
fabrica.wallet.getBalance()
ashan.wallet.getBalance()

class Person {
    
    let wallet = Wallet.shared
    var goods = [String]()
    
    private func get(goods: String) {
        self.goods.append(goods)
        print("–¢–æ–≤–∞—Ä \(goods) –∫—É–ø–ª–µ–Ω!")
    }
    
    private func give(money: Int) {
        self.wallet.withdraw(cash: money)
        print("–°—É–º–º–∞ —á–µ–∫–∞: \(money) —Ä—É–±–ª–µ–π")
    }
    
    func buy(goods: String, price: Int) {
        guard price <= wallet.getBalance() else {
            return
        }
        
        get(goods: goods)
        give(money: price)
    }
}

let vasya = Person()
print(vasya.goods)
vasya.wallet.getBalance()
fabrica.wallet.add(cash: 80000)
vasya.wallet.getBalance()
vasya.buy(goods: "iPhone 13", price: 69990)
//---------------------------------------------------------------------------------


//        <--- –°—Ç—Ä—É–∫—Ç—É—Ä—ã --->

// –ö–ª–∞—Å—Å - —Å—Å—ã–ª–æ—á–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö (Reference Type)
// –≠–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ —Ö—Ä–∞–Ω—è—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±–ª–∞—Å—Ç—å –ø–∞–º—è—Ç–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –æ–±—ä–µ–∫—Ç
class NewPerson {
    
    let name: String
    var phone: Int
    
    init(name: String, phone: Int) {
        self.name = name
        self.phone = phone
    }
    
    func changePhone(phone: Int) {
        self.phone = phone
    }
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ - –∑–Ω–∞—á–∏–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö (Value Type)
// –í —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –û–û–ü
// –≠–∫–∑–µ–º–ø–ª—è—Ä—ã —Å—Ç—Ä—É–∫—Ç—É—Ä —Ö—Ä–∞–Ω—è—Ç –∑–Ω–∞—á–µ–Ω–∏—è
struct User {
    
    let name: String
    var phone: Int
    
    // Mutating(–º—É—Ç–∏—Ä—É—é—â–∏–π) –º–µ—Ç–æ–¥ - —ç—Ç–æ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å–∞–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, —Ç–æ –µ—Å—Ç—å —Å–∞–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–±—ä—è–≤–ª–µ–Ω
    mutating func changePhone(phone: Int) {
        self.phone = phone
    }
}


let person = NewPerson(name: "–í–∞—Å—è", phone: 89996665544)
var person1 = NewPerson(name: "–û–ª–µ—Å—è", phone: 84334334343)
let user = User(name: "–§–µ–¥—è", phone: 88887776655)
var user1 = User(name: "–ú–∞—à–∞", phone: 12345678901)

person.phone = 89008008070
// user.phone = 86665554433 - ERROR! –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ let –∑–Ω–∞—á–µ–Ω–∏–µ, –∞ –Ω–µ let —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ
// person = person1 - ERROR!
person1 = person // –¢–µ–ø–µ—Ä—å –æ–±–∞ –æ–±—ä–µ–∫—Ç–∞ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ person
person.name
person1.name
person1.phone = 12345678999
person.phone

user1 = user
user1.phone = 23456789012
user.phone




struct Person1 {
    var name: String
    var age: Int
}

var pers = Person1(name: "Anthony", age: 32)
var pers1 = Person1(name: "Petr", age: 21)

var couch = Person1(name: "Ivanovich", age: 56)

struct HockeyTeam {
    var name: String
    var members: [Person1]
    var couch: Person1
    var score: Int
}

var team1 = HockeyTeam(name: "Minsk Warriours", members: [pers, pers1], couch: couch, score: 0)
//---------------------------------------------------------------------------------


//        <--- –ü—Ä–æ—Ç–æ–∫–æ–ª—ã --->
// –ü—Ä–æ—Ç–æ–∫–æ–ª—ã - –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π - –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —è–≤–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞, —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —ç—Ç–æ–º—É —Ç–∏–ø—É (–±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –ø–æ–¥ —ç—Ç–æ—Ç —Ç–∏–ø)
protocol FullyNamed {
    var fullName: String { get }
}

struct Human: FullyNamed {
    var fullName: String
    var age: Int
    var phoneNumber: Int
}

class Company: FullyNamed {
    var fullName: String
    var director = "Tim Cook"
    
    init(prefix: String, title: String) {
        self.fullName = "\(prefix) \(title)"
    }
}

let misha = Human(fullName: "Mikhail", age: 34, phoneNumber: 89009009090)
let alisa = Human(fullName: "Alisa", age: 23, phoneNumber: 89008008080)
let apple = Company(prefix: "LLC", title: "Apple")
let google = Company(prefix: "LLC", title: "Google")

class Bank: Company {
    var clients = [FullyNamed]()
    
}

let bank = Bank(prefix: "OOO", title: "Alfa-Bank")

bank.clients.append(misha)
bank.clients.append(alisa)
bank.clients.append(apple)
bank.clients.append(google)
google.director = "Vasya Pupkin"

for client in bank.clients {
    print(client.fullName)
    
    if client is Human {
        print((client as! Human).phoneNumber)
    } else if client is Company {
        print((client as! Company).director)
    }
}

enum Speciality {
    case iOS, android, python, java
}

protocol NewHuman {
    var name: String { get }
}

protocol Developer {
    var speciality: Speciality { get }
    var experienceInYears: Int { get }
}

protocol NewTeacher {
    var speciality: Speciality { get }
    
    func teach(theme: String)
}

struct DevTeacher: NewHuman, Developer, NewTeacher {
    
    var name: String
    var speciality: Speciality
    var experienceInYears: Int
    
    func teach(theme: String) {
        print("I teach people. Theme: \(theme).")
    }
}

let vlad = DevTeacher(name: "Vlad", speciality: .iOS, experienceInYears: 6)
vlad.name
vlad.teach(theme: "Protocols")






protocol Named {
    var title: String { get }
}

protocol Location {
    var lat: Double { get }
    var lon: Double { get }
}

struct City: Location, Named {
    
    var lat: Double
    var lon: Double
    var title: String
}

struct Club: Location, Named {
    
    var lat: Double
    var lon: Double
    var title: String
}

struct Brand: Named {
    
    var title: String
    
}

func concert(place: Location & Named, band: String) {
    print("Group \(band) protrude in \(place.title). Coordinates for GRS: \(place.lat), \(place.lon)")
}

let moscow = City(lat: 45.56464, lon: 45.557565, title: "Moscow")
let glavClub = Club(lat: 64.54654, lon: 43.545353, title: "GlavClub")
let brand = Brand(title: "Apple")

concert(place: moscow, band: "Naiw")
concert(place: glavClub, band: "Dergat'")
//---------------------------------------------------------------------------------


//        <--- –ü–∞—Ç—Ç–µ—Ä–Ω—ã --->

//            –ü–∞—Ç—Ç–µ—Ä–Ω –î–µ–ª–µ–≥–∞—Ç
// –î–µ–ª–µ–≥–∞—Ç–æ—Ä - —Ç–æ—Ç, –∫—Ç–æ —Å—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É
// –¢–∏–ø –¥–µ–ª–µ–≥–∞—Ç–∞ - –ø—Ä–æ—Ç–æ–∫–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–∏—Å—ã–≤–∞–µ—Ç, –∫–∞–∫–∏–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –∏ –º–µ—Ç–æ–¥–∞–º–∏ –¥–æ–ª–∂–µ–Ω –æ–±–ª–∞–¥–∞—Ç—å –î–µ–ª–µ–≥–∞—Ç
// –î–µ–ª–µ–≥–∞—Ç - —Ç–æ—Ç, –∫—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É

protocol CoffeeMakerDelegate {
    func makeCoffee(amount: Int) -> Int
}

class Client {
    
    var name = "Vadeek"
    
    var coffeeMaker: CoffeeMakerDelegate?
    
    func visitCoffeeHouse(coffeeMaker: CoffeeMakerDelegate) {
        self.coffeeMaker = coffeeMaker
    }
    
    func goOutCoffeeHouse() {
        self.coffeeMaker = nil
    }
    
    func buyCoffee(amount: Int) {
        guard let delegate = coffeeMaker else {
            print("You're not in Coffee House")
            return
        }
        
        let count = delegate.makeCoffee(amount: amount)
        print("You bought \(count) cups of coffee")
    }
}

struct Officiant: CoffeeMakerDelegate {
    
    func makeCoffee(amount: Int) -> Int {
        let price = 350
        let count = amount / price
        return count
    }
}

struct Barista: CoffeeMakerDelegate {
    func makeCoffee(amount: Int) -> Int {
        let price = 100
        let count = amount / price
        return count
    }
}

let officiant = Officiant()

let client = Client()

client.visitCoffeeHouse(coffeeMaker: officiant)
client.buyCoffee(amount: 2000)
client.goOutCoffeeHouse()

let barista = Barista()

client.visitCoffeeHouse(coffeeMaker: barista)
client.buyCoffee(amount: 400)
client.goOutCoffeeHouse()

client.buyCoffee(amount: 600)
//---------------------------------------------------------------------------------


//        <--- –î–∂–µ–Ω–µ—Ä–∏–∫–∏ (–û–±–æ–±—â–µ–Ω–∏—è, Generics) --->
// Generics - –æ–±–æ–±—â–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö

// Equatable - —Ä–∞–≤–Ω–æ/–Ω–µ —Ä–∞–≤–Ω–æ == !=
// Comparable - —Å—Ä–∞–≤–Ω–∏–º—ã–µ(—Å–æ–ø–æ—Å—Ç–∞–≤–∏–º—ã–µ) < > <= >= == !=
// CustomStringConvertible - –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
// Numeric - –≤—Å–µ —á–∏—Å–ª–∞

func addInts(a: Int, b: Int) -> Int {
    return  a + b
}

func add<T: Numeric>(a: T, b: T) -> T {
    return a + b
}

add(a: 56, b: 23)
add(a: 56.4, b: 23.9)


//---------------------------------------------------------------------------------


//        <--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫/–∏—Å–∫–ª—é—á–µ–Ω–∏–π --->

enum AuthError: Error {
    case wrongPassword
    case dataNotExists
    case serverLost
}

// –°–ø–æ—Å–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:

// 1. –ü—Ä–æ–±—Ä–æ—Å –æ—à–∏–±–∫—É ( throws - –∑–Ω–∞—á–∏—Ç —Ñ—É–Ω–∫—Ü–∏—è —Å–ø–æ—Å–æ–±–Ω–∞ –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É )
func auth(login: String, password: String) throws {
    
    let trueLogin = "Vasya"
    let truePass = "123"
    
    guard login == trueLogin else {
        throw AuthError.dataNotExists
    }
    
    guard password == truePass else {
        throw AuthError.wrongPassword
    }
    
    print("Hello, Admin!")
}


// 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –ø–æ–º–æ—â—å—é –±–ª–æ–∫–∞ do-catch
do {
    try auth(login: "Fedya", password: "4567")
    // var string = try ... –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
} catch AuthError.dataNotExists {
    print("Data not Exists")
} catch AuthError.wrongPassword {
    print("Wrong Password")
} catch {
    print("Some else Exception")
}


// 3. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–æ–º–æ–≥–∞–µ—Ç –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –Ω–∞–º –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏, –∞ –º—ã –≤—Å–µ–≥–æ –ª–∏—à—å —Ö–æ—Ç–∏–º –∑–Ω–∞—Ç—å, —É—Å–ø–µ—à–Ω–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç)
try? auth(login: "Vasya", password: "123546")


// 4. –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑–æ—à–∏–±–æ—á–Ω–æ—Å—Ç–∏ (–≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –º—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –æ—à–∏–±–∫—É –∫–æ–¥ –Ω–µ —Å–ø–æ—Å–æ–±–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É)
try! auth(login: "Vasya", password: "123")
// try! auth(login: "Vasya", password: "12357") - –í–´–ó–û–í–ï–¢ –û–®–ò–ë–ö–£!!!
//---------------------------------------------------------------------------------






var array: [Int?] = [5, 4, 6, 99, nil, nil]
var sumi = 0

// first way (force unwrapping)
for item in array {
    if item != nil {
        sumi += item!
    }
    // –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É —Å –ø–æ–º–æ—â—å—é optional binding, force unwrapping, ??
}

// second way (optional binding)
for item in array {
    if let item = item {
        sumi += item
    }
}

// third way (??)
for item in array {
    sumi += item ?? 0
}





var studentsJournal: [String:Int] = ["Vasya _":4, "Gena _":3, "Jora _":5, "Olesya _":5, "Alexander _":2]
var summi = 0.0

studentsJournal.updateValue(5, forKey: "Vasya _")
studentsJournal.updateValue(4, forKey: "Alexander _")
studentsJournal.updateValue(4, forKey: "Michael _")
studentsJournal.updateValue(3, forKey: "Maxim _")
studentsJournal.removeValue(forKey: "Vasya _")
studentsJournal.removeValue(forKey: "Olesya _")

for value in studentsJournal.values {
    summi += Double(value)
}
summi
summi /= Double(studentsJournal.count)





var monthDays = ["Jan":31, "Feb":28, "Mar":31, "Apr":29, "May":31, "Jun":30, "Jul":29, "Aug":31, "Sep":30, "Oct":31, "Nov":30, "Dec":31]

for (month, days) in monthDays {
    print(month, days)
}

for month in monthDays.keys {
    print("\(month) - \(monthDays[month]!)")
}





var chess = [String:Bool]()

var letters = ["A", "B", "C", "D", "E", "F", "G", "H"]
var numberss = Array(1...8)

for (index, value) in letters.enumerated() {
    for num in numberss {
        var str = "\(value)\(num)"
        guard (index + num) % 2 == 0 else {
            chess.updateValue(false, forKey: str)
            continue
        }
        chess.updateValue(true, forKey: str)
    }
}
chess.count


// A - 0 - Black (false)
// B - 1 - White (true)

// key - A1, value - true/false
// true - white
// false - black

    




let strin = "dwjdkandkjnk, andk, dwkdwaklda. dwkaldmawlkd2322. 21 askald, sldka;, ald;sa 'dawdsa', wad. 12lk;lk, 2112121."

var sumLetters = 0
var sumNums = 0
var sumSigns = 0

for i in strin {
    switch i {
    case "0","1","2","3","4","5","6","7","8","9":
        sumNums += 1
    case ".",",",";","'":
        sumSigns += 1
    default:
        if i != " " {
            sumLetters += 1
            break
        }
        break
    }
}
sumSigns
sumLetters
sumNums





let personFirstName = "Mihail"
let personSecondName = "Zubenko"
let personOtchestvo = "Petrovich"

switch (personFirstName, personSecondName, personOtchestvo) {
case (let first, _, _) where first.lowercased().first == "o" || first.lowercased().first == "a":
    print("\(first)")
case (let first, _, let otchestvo) where otchestvo.lowercased().first == "v" || otchestvo.lowercased().first == "d":
    print("\(first) \(otchestvo)")
case (_, let second, _) where second.lowercased().first == "z" || second.lowercased().first == "e":
    print("\(second)")
default:
    print("\(personSecondName) \(personFirstName) \(personOtchestvo)")
    break
}
// –∏–º—è –Ω–∞ –æ –∏–ª–∏ –∞, —Ç–æ –ø–æ –∏–º–µ–Ω–∏
// –æ—Ç—á–µ—Å—Ç–≤–æ –Ω–∞ –≤ –∏–ª–∏ –¥, —Ç–æ –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ
// —Ñ–∞–º–∏–ª–∏—è –Ω–∞ –∑ –∏–ª–∏ –µ, —Ç–æ —Ñ–∞–º–∏–ª–∏—è
// –¥–µ—Ñ–æ–ª—Ç –∏–º—è –æ—Ç—á–µ—Å—Ç–≤–æ —Ñ–∞–º–∏–ª–∏—è





// 4.
// –ü–æ–ª–µ 10—Ö10 –ú–æ—Ä—Å–∫–æ–π –ë–æ–π
// –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–∞–±–ª–µ–π, –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–±–∏—Ç–æ. –î–ª–∏–Ω–Ω—ã–µ/–æ–¥–Ω–æ–ø–æ–∏–Ω—Ç–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏
// –°–≤–∏—Ç—á –ø–æ–ª—É—á–∞–µ—Ç tuple point(x,y) -> –º–∏–º–æ/—Ä–∞–Ω–∏–ª/—É–±–∏–ª



